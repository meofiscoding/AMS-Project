@{
    ViewData["Title"] = "Class Detail";
}
<style>
    /* Overall styles */
    body {
        font-family: sans-serif;
    }

    /* Tab styles */
    .tabview {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        margin: 0 30px;
    }

        .tabview button {
            background-color: transparent;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 10px;
            margin-right: 10px;
            font-size: 16px;
            font-weight: bold;
            color: #777;
            transition: color 0.2s ease-in-out;
        }

            .tabview button.active {
                color: #6d97cf;
                border-bottom: 3px solid #1b6796;
                font-size: large;
            }
    li{
        list-style-type: none;
    }

    .teacher-name{
        font-weight: bold;
    }

    .add-student{
        cursor: pointer;
    }

    /* Content styles */
    .tabcontent {
        display: none;
        padding: 20px;
        border-top: 2px solid #aca4a4;
    }

        .tabcontent.active {
            display: block;
        }
        .ui-autocomplete {
            position: absolute !important;
            top: 0;
            left: 0;
            z-index: 9999;
        }

        .modal-body {
            height: 500px;
            overflow-y: auto;
        }

</style>
<div class="tabview">
    <strong class="class-title" style="font-size: xx-large;"></strong>
    <button class="tablinks active">Stream</button>
    <button class="tablinks">Assignment</button>
    <button class="tablinks">People</button>
    <button class="tablinks">Groups</button>
</div>

<div id="tab1" class="tabcontent active">
 </div>

<div id="tab2" class="tabcontent">
</div>

<div id="tab3" class="tabcontent">
    <div>
        <h3 style=" color: #0a5e15;">Teachers</h3>
        <ul id="teacher-list" >
            <!-- The list of teachers will be dynamically generated here -->
        </ul>
        <div style="display: flex; justify-content: space-between; align-items: center;">
             <h3 style=" color: #0a5e15;">Students</h3>
            <strong class="add-student" data-bs-toggle="modal" data-bs-target="#exampleModal">Add Student <i class="fa-solid fa-user-plus"></i></strong>
        </div>
        <ul id="student-list" >
            <!-- The list of students will be dynamically generated here -->
        </ul>
    </div>
</div>

<div id="tab4" class="tabcontent">

</div>

<!-- Bootstrap modal which has an input search and a button invite-->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Add Student</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="input-group mb-3">
          <input type="text" class="form-control" id="search-input" placeholder="Search for student" aria-label="Search for student">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="addToClass">Add to Class</button>
      </div>
    </div>
  </div>
</div>

@section Scripts{
    <partial name="_ValidationScriptsPartial" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.1/jquery-ui.min.js"></script>
    <script>
  $(document).ready(function() {
            debugger;
           const token = localStorage.getItem('token');
            //redirect to the login page if the local storage is empty
            if(token == null)
            {
                window.location.href = "/Login";
                return;
            }

            // Decode the token to get the expiration time
            const decodedToken = jwt_decode(token);
            // Check if the token has expired
            const expirationTime = decodedToken.exp;
            //get user name from token
            //const userName = decodedToken.unique_name;

            if (Date.now() >= expirationTime * 1000) {
                 // Prompt the user to log in again
              alert('Your session has expired. Please log in again.');
            } else {
                 // Get all the tabs and the content
        const tabButtons = document.querySelectorAll(".tablinks");
        const tabContents = document.querySelectorAll(".tabcontent");
        var url = window.location.href;
        const classId = url.substring(url.lastIndexOf('/') + 1);

        function showTab(tabIndex) {
            // Hide all tab contents
            tabContents.forEach((content) => {
                content.style.display = "none";
            });

            // Remove active class from all tab buttons
            tabButtons.forEach((button) => {
                button.classList.remove("active");
            });

            // Show the selected tab content and set the corresponding button as active
            const selectedTab = tabContents[tabIndex];
            const selectedButton = tabButtons[tabIndex];
            
        if(tabIndex == 2){
            if($("#student-list").children().length == 0 && $("#teacher-list").children().length == 0){
                 //call ajax to get data
                 $.ajax({
                    url: 'https://localhost:7290/api/ClassStudents/' + classId,
                    type: 'GET',
                    headers: { 'Authorization': 'Bearer ' + token },
                    success: function (data) {
                        //get data element that has data.userRole.roleName = "student"
                        var studentList = data.filter(function (item) {
                            return item.userRole.roleName.toLowerCase() == "student";
                        });
                        //get first data element that has data.userRole.roleName = "teacher"
                        var teacherList = data.filter(function (item) {
                            return item.userRole.roleName.toLowerCase() == "teacher";
                        });
                        //remove duplicates in teacherList
                        teacherList = teacherList.filter((v, i, a) => a.findIndex(t => (t.id === v.id)) === i)

                        if(studentList.length == 0)
                        {
                            $("#student-list").append("<li>No student in this class</li>");
                        }else{
                            //looping through studentList and append to student-list
                            for (var i = 0; i < studentList.length; i++) {
                                var student = studentList[i];
                                var html = `<div id="user-item-template">
                                            <li>
                                                <input type="checkbox" class="user-checkbox" id=${student.id}>
                                                <span class="user-name">${student.fullName}</span>
                                            </li>
                                        </div>`
                                //append html to student-list
                                $("#student-list").append(html);
                            }
                        }
                    
                        //looping through teacherList and append to teacher-list
                        for (var i = 0; i < teacherList.length; i++) {
                            var teacher = teacherList[i];
                            var html = `<div id="user-item-template">
                                        <li>
                                        <i class="fa-solid fa-graduation-cap"></i>
                                            <a class="teacher-name">${teacher.fullName}</a>
                                        </li>
                                    </div>`
                            //append html to teacher-list
                            $("#teacher-list").append(html);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert(xhr.responseText);
                    }
                })
            }     
        }
           

            selectedTab.style.display = "block";
            selectedButton.classList.add("active");
        }

        // Show the first tab by default
        showTab(0);

        // Add click event listeners to tab buttons
        tabButtons.forEach((button, index) => {
            button.addEventListener("click", () => {
                showTab(index);
            });
        });

            //make an ajax call
            $.ajax({
                url: 'https://localhost:7290/api/Classes/' + classId,
                type: 'GET',
                headers: { 'Authorization': 'Bearer ' + token },
                success: function (data) {
                    //set class-title html is class name
                    $(".class-title").html(data.className);
                },
                error: function (xhr, status, error) {
                    alert(xhr.responseText);
                }
            });

            var allSelectted = "";
            var listSelected = [];
            function extractLast(term) {
                //check if term contain ","
                if (term.indexOf(",") == -1) {
                    return term;
                }else{
                    return term.split(',').pop().trim();
                }
            }

            $("#search-input").autocomplete({
                source: function(request, response) {
                    var term = extractLast(request.term)
                    debugger;
                // Make an AJAX call to your server to get a list of matching students based on the search term
                $.ajax({
                    url: 'https://localhost:7290/api/Users',
                    type: 'GET',
                    headers: { 'Authorization': 'Bearer ' + token },
                    data: { search: term },
                    success: function (data) {
                        //get data element that has data.userRole.roleName = "student"
                        var studentList = data.filter(function (item) {
                            return item.userRole.roleName.toLowerCase() == "student";
                        });

                        //remove element in studentList if it is in listSelected
                        for (var i = 0; i < listSelected.length; i++) {
                            var selected = listSelected[i];
                            studentList = studentList.filter(function (item) {
                                return item.id != selected;
                            });
                        }
                         // Map the array of student objects to an array of label/value pairs
                        var results = studentList.map(function(student) {
                        return {
                            label: student.userEmail,
                            value: student.id
                        };
                    });
                        response(results);                        
                    },
                    error: function (xhr, status, error) {
                        alert(xhr.responseText);
                    }
                })
                // Return the list of matching students as an array
                },
                minLength: 2, 
                multiple: true, // Enable multiple select
                select: function(event, ui) {
                    //append ui.item.value to allSelectted
                    allSelectted += ui.item.label + ", ";
                    listSelected.push(ui.item.value);
                    $(this).val(allSelectted);
                    return false;
                },
                focus: function(event, ui) {
                // Handle the focus event when a student is highlighted in the autocomplete dropdown
                
                }
            });

            //each time user delete a character in search-input
            $("#search-input").on("keydown", function (event) {
                //check if user press backspace
                if (event.keyCode == 8) {
                    //get the last character in allSelectted
                    var lastChar = allSelectted[allSelectted.length - 1];
                    //check if lastChar is ","
                    if (lastChar == ",") {
                        //remove the last character in allSelectted
                        allSelectted = allSelectted.substring(0, allSelectted.length - 1);
                        //remove the last element in listSelected
                        listSelected.pop();
                    }
                }
            });

            //onClick in #addToClass
            $("#addToClass").click(function(){
                //call api to add user to class using listSelected
                $.ajax({
                    url: 'https://localhost:7290/api/ClassStudents/'+classId+'/students',
                    type: 'POST',
                    contentType: 'application/json',
                    headers: { 'Authorization': 'Bearer ' + token },
                    data: JSON.stringify (listSelected ),
                    success: function (data) {
                        alert(data);
                        location.reload();
                    },
                    error: function (xhr, status, error) {
                        alert(xhr.responseText);
                    }
                })
            })
        }
  });
    </script>
    }